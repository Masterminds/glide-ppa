#!/bin/bash
clear
# Deps
DEP_PKGS="github.com/codegangsta/cli github.com/Masterminds/semver github.com/Masterminds/vcs gopkg.in/yaml.v2"
SRC="$GOPATH/src/github.com/Masterminds/glide"
GIT="git@github.com:Masterminds/glide.git"

# source env
. bin/env

# Get gox
getGox() {
	GOX=$(which gox)
	if [[ "$?" != 0 ]]; then
		echo "Getting gox..."
		go get -u github.com/mitchellh/gox
	fi
}

# Build with gox
build() {
	VERSION=$(curl -s https://raw.githubusercontent.com/Masterminds/glide.sh/master/version)
	echo "Building version $VERSION"
	if [[ -d "$SRC" ]]; then
		cd $SRC
		git checkout master
		git pull --all
	else
		git clone "$GIT" $SRC
		cd $SRC
	fi
	if [[ "$VERSION" == "$VERSION_NUMBER" ]]; then
		fail "Version $VERSION must be different than current version $VERSION_NUMBER"
	fi
	git checkout ${VERSION}
	git rev-parse --abbrev-ref HEAD
	echo "Getting needed packages..."
	go get -u $DEP_PKGS
	gox -verbose -ldflags "-X main.version=${VERSION}" -os="linux" -arch="amd64 386" -output="dist/{{.OS}}-{{.Arch}}/glide" .
	cd -
}

# Copy binaries
copy() {
	PPA_VERSION=${VERSION:1}
	for dist in $DISTS; do
		cd $dist/debian
		mkdir -p i386
		mkdir -p amd64
		# This folder is used at $dist/debian/rules
		mkdir -p release
		cp $SRC/dist/linux-386/glide i386/
		cp $SRC/dist/linux-amd64/glide amd64/
		cd ..
		dch -v "${PPA_VERSION}~$dist" -D "$dist" -u low "Release ${VERSION}~$dist"
		rm -f glide_*
		debuild -S -sa
		mv ../glide_* .
		cd ..
	done
}

set +e
getGox
# From here on, we cant get any errors
set -e
build
copy
echo "$VERSION" > "$VERSION_FILE"
